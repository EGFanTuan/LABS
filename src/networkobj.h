#ifndef NETWORKOBJ_H
#define NETWORKOBJ_H

#include <QObject>
#include <QNetworkAccessManager>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QVector>
#include "biliinfo.h"
#include "songmanager.h"


enum class SearchAPI{
    KG,
};


//This class is used to get data from the internet
//you should only use <GetInfo> to get data
//and the 3 download function to download song,lrc and img
//GetInfo will headle data and "get" all Urls that download function need
class NetworkObj : public QObject
{
    Q_OBJECT
    QNetworkAccessManager manager;
    QNetworkRequest request, bili_request;
    QString ffmpegPath;
    const QString header = 
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0";
public:
    explicit NetworkObj(QObject *parent = nullptr);
    //Generate a Url from keyword which can be used to search song, 
    //you actually should not call it directly unless you know what you are doing
    //@param keyword the keyword you want to search
    //@param page_limit the page of the search result
    //@param count_limit the count of result per page
    QUrl PraseUrl(QString keyword,int page_limit = 1,int count_limit = 10);
    //Get data from Url and return it as QByteArray, 
    //you should not call it directly unless you know what you are doing
    //@param url the Url you want to get data from
    //@param picOpti is deprecated
    //@param customRequest a custom request, if you want to use it, you should set the header yourself
    QByteArray GetUrlkData(QUrl url,bool picOpti = false,QNetworkRequest* customRequest = nullptr);
    //Generate a Url from hash which can be used to get info of a song, 
    //you should not call it directly unless you know what you are doing
    //@param hash the hash of the song you want to get info
    QUrl PraseSrcUrl(QString hash);
    //Generate a Url from hash which can be used to get lrc of a song,
    //you should not call it directly unless you know what you are doing
    //@param hash the hash of the song you want to get lrc
    QString GetLrcUrl(QString hash);
    //A api use to search via keyword
    //@param keyword the keyword you want to search
    //@param page_limit the page of the search result
    //@param count_limit the count of result per page
    //@return a list of map, each map contains info of a song
    //@note the map contains the following keys:
    //hash(return/define by the website, may diff with the file's hash), 
    //songname, album_name, author_name, timeLength, fileName, url, lrcUrl, imgUrl
    [[deprecated("Use SearchInfo() instead")]]
    QList<QMap<QString,QString>> GetInfo(QString keyword,int page_limit = 1,int count_limit = 10);
    //A api use to search via keyword
    //@param keyword the keyword you want to search
    //@param page_limit the page of the search result
    //@param count_limit the count of result per page
    //@param api the API to use for the search
    //@return a vector of SongItem's ptr
    QVector<SongPtr> SearchInfo(QString keyword, int page_limit = 1, int count_limit = 20, SearchAPI api = SearchAPI::KG);
    //A api use to get infomation of the video via bid
    //@param bid the bid of the video you want to get info
    //@param message a string to store the error message if any
    //@return BiliInfo object
    BiliInfo GetInfoViaBid(QString bid, QString& message);
    //these 4 function do things like their name
    void DownloadM4a(QString bid, QString cid, QString path, QString filename, QString& message, bool toMp3 = true);
    void DownloadSong(QUrl url, QString path, QString filename);
    void DownloadLrc(QUrl url, QString path, QString filename);
    void DownloadImg(QUrl url, QString path, QString filename);
    //convert a m4a file to mp3
    //generated by gpt
    //bool Convert2mp3(QString target, QString output, bool deleteTarget = false);
    bool Convert2mp3E(QString target, QString output, bool deleteTarget = false);
signals:
    void SearchFinished();
};

#endif // NETWORKOBJ_H
